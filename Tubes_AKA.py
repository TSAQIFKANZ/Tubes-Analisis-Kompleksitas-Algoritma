# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zw0c4FRu7WuOrJTfm8OPY9Xl81gGFg13
"""

import time
import matplotlib.pyplot as plt
import random
import pandas as pd
from tabulate import tabulate
import sys

# Meningkatkan batas kedalaman rekursi agar tidak mudah error pada data besar
sys.setrecursionlimit(10000)

# Fungsi untuk mencari hotel terbaik secara iteratif
def cari_hotel_terbaik_iteratif(hotel_list, kriteria):
    hotel_terbaik = hotel_list[0]
    for hotel in hotel_list:
        if kriteria(hotel) < kriteria(hotel_terbaik):
            hotel_terbaik = hotel
    return hotel_terbaik

# Fungsi untuk mencari hotel terbaik secara rekursif
def cari_hotel_terbaik_rekursif(hotel_list, kriteria):
    # Fungsi pembantu untuk proses rekursi
    def rekursi(index, hotel_terbaik):
        if index == len(hotel_list):
            return hotel_terbaik
        if hotel_terbaik is None or kriteria(hotel_list[index]) < kriteria(hotel_terbaik):
            hotel_terbaik = hotel_list[index]
        return rekursi(index + 1, hotel_terbaik)
    return rekursi(0, None)

# Fungsi kriteria untuk menentukan nilai hotel (misalnya berdasarkan jarak)
def kriteria_hotel(hotel):
    return hotel['jarak']

# Uji performa kedua pendekatan
ukuran_data = [1, 10, 100, 1000, 5000]  # Berbagai ukuran data untuk diuji
waktu_iteratif = []
waktu_rekursif = []

for ukuran in ukuran_data:
    # Membuat data hotel secara acak
    daftar_hotel = [{"nama": f"Hotel {i}", "kapasitas": random.randint(10, 500), "jarak": random.randint(1, 100)} for i in range(ukuran)]

    # Mengukur waktu pendekatan iteratif
    mulai = time.time()
    cari_hotel_terbaik_iteratif(daftar_hotel, kriteria_hotel)
    waktu_iteratif.append(time.time() - mulai)

    # Mengukur waktu pendekatan rekursif
    mulai = time.time()
    cari_hotel_terbaik_rekursif(daftar_hotel, kriteria_hotel)
    waktu_rekursif.append(time.time() - mulai)

# Membuat tabel hasil perbandingan
hasil = {
    "Ukuran Data": ukuran_data,
    "Waktu Iteratif (s)": waktu_iteratif,
    "Waktu Rekursif (s)": waktu_rekursif
}
df = pd.DataFrame(hasil)
print(tabulate(df, headers='keys', tablefmt='grid'))

# Membuat grafik perbandingan waktu eksekusi
plt.plot(ukuran_data, waktu_iteratif, label='Iteratif')
plt.plot(ukuran_data, waktu_rekursif, label='Rekursif')
plt.xlabel('Ukuran Data')
plt.ylabel('Waktu (s)')
plt.title('Perbandingan Waktu Eksekusi')
plt.legend()
plt.show()